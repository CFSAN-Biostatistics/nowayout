process {
    withName: 'SEQKIT_SEQ' {
        ext.args = [
            params.fq_filter_by_len ? "-m ${params.fq_filter_by_len}" : ''
        ].join(' ').trim()
    }

    // withName: 'SAMTOOLS_FASTQ' {
    //     ext.args = (params.fq_single_end ? '-F 4' : '-f 2')
    // }

    if (params.fastp_run) {
        withName: 'FASTP' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}fastp.nf").fastpHelp(params).helpparams
            )
        }
    }

    if (params.kmaalign_run) {
        withName: 'KMA_ALIGN' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}kmaalign.nf").kmaalignHelp(params).helpparams
            )
        }
    }

    if (params.seqkit_grep_run) {
        withName: 'SEQKIT_GREP' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}seqkitgrep.nf").seqkitgrepHelp(params).helpparams
            )
        }
    }

    if (params.salmonidx_run){
        withName: 'SALMON_INDEX' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}salmonidx.nf").salmonidxHelp(params).helpparams
            )
        }

        withName: 'SALMON_QUANT' {
            errorStrategy = 'ignore'
            ext.args = '--minAssignedFrags 1'
        }
    }

    if (params.sourmashsketch_run) {
        withName: 'SOURMASH_SKETCH' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}sourmashsketch.nf").sourmashsketchHelp(params).helpparams
            )
        }
    }

    if (params.sourmashgather_run) {
        withName: 'SOURMASH_GATHER' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}sourmashgather.nf").sourmashgatherHelp(params).helpparams
            )

            if (params.sfhpy_run) {
                ext.args2 = addParamsToSummary(
                    loadThisFunction("${params.toolshelp}${params.fs}sfhpy.nf").sfhpyHelp(params).helpparams
                )
            }
        }
    }

    // if (params.sourmashtaxmetagenome_run) {
    //     withName: 'SOURMASH_TAX_METAGENOME' {
    //         ext.args = addParamsToSummary(
    //             loadThisFunction("${params.toolshelp}${params.fs}sourmashtaxmetagenome.nf").sourmashtaxmetagenomeHelp(params).helpparams
    //         )
    //     }
    // }

    if (params.gsalkronapy_run) {
        withName: 'NOWAYOUT_RESULTS' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}gsalkronapy.nf").gsalkronapyHelp(params).helpparams
            )
        }
    }

    if (params.krona_ktIT_run) {
        withName: 'KRONA_KTIMPORTTEXT' {
            ext.args = addParamsToSummary(
                loadThisFunction("${params.toolshelp}${params.fs}kronaktimporttext.nf").kronaktimporttextHelp(params).helpparams
            )
        }
    }
}

// Method to instantiate a new function parser
// Need to refactor using ScriptParser... another day
def loadThisFunction (func_file) {
    GroovyShell grvy_sh = new GroovyShell()
    def func = grvy_sh.parse(new File ( func_file ) )
    return func
}

// Method to add relevant final parameters to summary log
def addParamsToSummary(Map params_to_add = [:]) {

    if (!params_to_add.isEmpty()) {
        def not_null_params_to_add = params_to_add.findAll {
            it.value.clivalue != null && 
                it.value.clivalue != '[:]' &&
                it.value.clivalue != ''
        }

        params.logtheseparams += not_null_params_to_add.keySet().toList()

        return not_null_params_to_add.collect {
            "${it.value.cliflag} ${it.value.clivalue.toString().replaceAll(/(?:^\s+|\s+$)/, '')}"
        }.join(' ').trim()
    }
    return 1
}